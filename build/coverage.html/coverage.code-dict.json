{"/home/travis/build/npmtest/node-npmtest-less-loader/test.js":"/* istanbul instrument in package npmtest_less_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-less-loader/lib.npmtest_less_loader.js":"/* istanbul instrument in package npmtest_less_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_less_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_less_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-less-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-less-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_less_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_less_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_less_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_less_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_less_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_less_loader.__dirname + '/lib.npmtest_less_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-less-loader/node_modules/less-loader/dist/index.js":"var less = require('less');\nvar pify = require('pify');\nvar processResult = require('./processResult');\nvar getOptions = require('./getOptions');\n\nvar render = pify(less.render.bind(less));\n\nfunction lessLoader(source) {\n  var loaderContext = this;\n  var options = getOptions(loaderContext);\n  var done = loaderContext.async();\n  var isSync = typeof done !== 'function';\n\n  if (isSync) {\n    throw new Error('Synchronous compilation is not supported anymore. See https://github.com/webpack-contrib/less-loader/issues/84');\n  }\n\n  processResult(loaderContext, render(source, options));\n}\n\nmodule.exports = lessLoader;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-less-loader/node_modules/less-loader/dist/processResult.js":"var removeSourceMappingUrl = require('./removeSourceMappingUrl');\nvar formatLessError = require('./formatLessError');\n\n/**\n * Removes the sourceMappingURL from the generated CSS, parses the source map and calls the next loader.\n *\n * @param {loaderContext} loaderContext\n * @param {Promise<LessResult>} resultPromise\n */\nfunction processResult(loaderContext, resultPromise) {\n  var callback = loaderContext.callback;\n\n\n  resultPromise.then(function (_ref) {\n    var css = _ref.css,\n        map = _ref.map,\n        imports = _ref.imports;\n\n    imports.forEach(loaderContext.addDependency, loaderContext);\n    return {\n      // Removing the sourceMappingURL comment.\n      // See removeSourceMappingUrl.js for the reasoning behind this.\n      css: removeSourceMappingUrl(css),\n      map: typeof map === 'string' ? JSON.parse(map) : map\n    };\n  }, function (lessError) {\n    throw formatLessError(lessError);\n  }).then(function (_ref2) {\n    var css = _ref2.css,\n        map = _ref2.map;\n\n    callback(null, css, map);\n  }, callback);\n}\n\nmodule.exports = processResult;\n//# sourceMappingURL=processResult.js.map","/home/travis/build/npmtest/node-npmtest-less-loader/node_modules/less-loader/dist/removeSourceMappingUrl.js":"var matchSourceMappingUrl = /\\/\\*# sourceMappingURL=[^*]+\\*\\//;\n\n/**\n * Removes the sourceMappingURL comment. This is necessary because the less-loader\n * does not know where the final source map will be located. Thus, we remove every\n * reference to source maps. In a regular setup, the css-loader will embed the\n * source maps into the CommonJS module and the style-loader will translate it into\n * base64 blob urls.\n *\n * @param {string} content\n * @returns {string}\n */\nfunction removeSourceMappingUrl(content) {\n  return content.replace(matchSourceMappingUrl, '');\n}\n\nmodule.exports = removeSourceMappingUrl;\n//# sourceMappingURL=removeSourceMappingUrl.js.map","/home/travis/build/npmtest/node-npmtest-less-loader/node_modules/less-loader/dist/formatLessError.js":"function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar os = require('os');\n\n/**\n * Tries to get an excerpt of the file where the error happened.\n * Uses err.line and err.column.\n *\n * Returns an empty string if the excerpt could not be retrieved.\n *\n * @param {LessError} err\n * @returns {Array<string>}\n */\nfunction getFileExcerptIfPossible(lessErr) {\n  try {\n    var excerpt = lessErr.extract.slice(0, 2);\n    var column = Math.max(lessErr.column - 1, 0);\n\n    if (typeof excerpt[0] === 'undefined') {\n      excerpt.shift();\n    }\n\n    excerpt.push(`${new Array(column).join(' ')}^`);\n\n    return excerpt;\n  } catch (unexpectedErr) {\n    // If anything goes wrong here, we don't want any errors to be reported to the user\n    return [];\n  }\n}\n\n/**\n * Beautifies the error message from Less.\n *\n * @param {LessError} lessErr\n * @param {string} lessErr.type - e.g. 'Name'\n * @param {string} lessErr.message - e.g. '.undefined-mixin is undefined'\n * @param {string} lessErr.filename - e.g. '/path/to/style.less'\n * @param {number} lessErr.index - e.g. 352\n * @param {number} lessErr.line - e.g. 31\n * @param {number} lessErr.callLine - e.g. NaN\n * @param {string} lessErr.callExtract - e.g. undefined\n * @param {number} lessErr.column - e.g. 6\n * @param {Array<string>} lessErr.extract - e.g. ['    .my-style {', '      .undefined-mixin;', '      display: block;']\n * @returns {LessError}\n */\nfunction formatLessError(err) {\n  /* eslint-disable no-param-reassign */\n  var msg = err.message;\n\n  // Instruct webpack to hide the JS stack from the console\n  // Usually you're only interested in the SASS stack in this case.\n  err.hideStack = true;\n\n  err.message = [os.EOL].concat(_toConsumableArray(getFileExcerptIfPossible(err)), [msg.charAt(0).toUpperCase() + msg.slice(1), `      in ${err.filename} (line ${err.line}, column ${err.column})`]).join(os.EOL);\n\n  return err;\n} /* eslint-enable no-param-reassign */\n\nmodule.exports = formatLessError;\n//# sourceMappingURL=formatLessError.js.map","/home/travis/build/npmtest/node-npmtest-less-loader/node_modules/less-loader/dist/getOptions.js":"var loaderUtils = require('loader-utils');\nvar clone = require('clone');\nvar createWebpackLessPlugin = require('./createWebpackLessPlugin');\n\n/**\n * Retrieves the options from the loaderContext, makes a deep copy of it and normalizes it for further consumption.\n *\n * @param {LoaderContext} loaderContext\n */\nfunction getOptions(loaderContext) {\n  var options = Object.assign({\n    plugins: [],\n    relativeUrls: true,\n    compress: Boolean(loaderContext.minimize)\n  }, clone(loaderUtils.getOptions(loaderContext)));\n\n  // We need to set the filename because otherwise our WebpackFileManager will receive an undefined path for the entry\n  options.filename = loaderContext.resource;\n\n  // When no paths are given, we use the webpack resolver\n  if ('paths' in options === false) {\n    // It's safe to mutate the array now because it has already been cloned\n    options.plugins.push(createWebpackLessPlugin(loaderContext));\n  }\n\n  if (options.sourceMap) {\n    if (typeof options.sourceMap === 'boolean') {\n      options.sourceMap = {};\n    }\n    if ('outputSourceFiles' in options.sourceMap === false) {\n      // Include source files as `sourceContents` as sane default since this makes source maps \"just work\" in most cases\n      options.sourceMap.outputSourceFiles = true;\n    }\n  }\n\n  return options;\n}\n\nmodule.exports = getOptions;\n//# sourceMappingURL=getOptions.js.map","/home/travis/build/npmtest/node-npmtest-less-loader/node_modules/less-loader/dist/createWebpackLessPlugin.js":"var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar less = require('less');\nvar loaderUtils = require('loader-utils');\nvar pify = require('pify');\n\nvar stringifyLoader = require.resolve('./stringifyLoader.js');\nvar trailingSlash = /[/\\\\]$/;\nvar isLessCompatible = /\\.(le|c)ss$/;\n// Less automatically adds a .less file extension if no extension was given.\n// This is problematic if there is a module request like @import \"~some-module\";\n// because in this case Less will call our file manager with `~some-module.less`.\n// Since dots in module names are highly discouraged, we can safely assume that\n// this is an error and we need to remove the .less extension again.\n// However, we must not match something like @import \"~some-module/file.less\";\nvar matchMalformedModuleFilename = /(~[^/\\\\]+)\\.less$/;\n\n/**\n * Creates a Less plugin that uses webpack's resolving engine that is provided by the loaderContext.\n *\n * @param {LoaderContext} loaderContext\n * @param {string=} root\n * @returns {LessPlugin}\n */\nfunction createWebpackLessPlugin(loaderContext) {\n  var fs = loaderContext.fs;\n\n  var resolve = pify(loaderContext.resolve.bind(loaderContext));\n  var loadModule = pify(loaderContext.loadModule.bind(loaderContext));\n  var readFile = pify(fs.readFile.bind(fs));\n\n  var WebpackFileManager = function (_less$FileManager) {\n    _inherits(WebpackFileManager, _less$FileManager);\n\n    function WebpackFileManager() {\n      _classCallCheck(this, WebpackFileManager);\n\n      return _possibleConstructorReturn(this, (WebpackFileManager.__proto__ || Object.getPrototypeOf(WebpackFileManager)).apply(this, arguments));\n    }\n\n    _createClass(WebpackFileManager, [{\n      key: 'supports',\n      value: function supports() /* filename, currentDirectory, options, environment */{\n        // eslint-disable-line class-methods-use-this\n        // Our WebpackFileManager handles all the files\n        return true;\n      }\n    }, {\n      key: 'loadFile',\n      value: function loadFile(filename, currentDirectory /* , options, environment */) {\n        // eslint-disable-line class-methods-use-this\n        var url = filename.replace(matchMalformedModuleFilename, '$1');\n        var moduleRequest = loaderUtils.urlToRequest(url);\n        // Less is giving us trailing slashes, but the context should have no trailing slash\n        var context = currentDirectory.replace(trailingSlash, '');\n        var resolvedFilename = void 0;\n\n        return resolve(context, moduleRequest).then(function (f) {\n          resolvedFilename = f;\n          loaderContext.addDependency(resolvedFilename);\n\n          if (isLessCompatible.test(resolvedFilename)) {\n            return readFile(resolvedFilename).then(function (contents) {\n              return contents.toString('utf8');\n            });\n          }\n\n          return loadModule([stringifyLoader, resolvedFilename].join('!')).then(JSON.parse);\n        }).then(function (contents) {\n          return {\n            contents,\n            filename: resolvedFilename\n          };\n        });\n      }\n    }]);\n\n    return WebpackFileManager;\n  }(less.FileManager);\n\n  return {\n    install(lessInstance, pluginManager) {\n      pluginManager.addFileManager(new WebpackFileManager());\n    },\n    minVersion: [2, 1, 1]\n  };\n}\n\nmodule.exports = createWebpackLessPlugin;\n//# sourceMappingURL=createWebpackLessPlugin.js.map"}